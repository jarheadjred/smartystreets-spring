buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.0.2.RELEASE'
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.5.RELEASE'
    }
}

plugins {
    id "com.jfrog.bintray" version "1.1"
}
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

import java.text.SimpleDateFormat

sourceCompatibility = 1.8
targetCompatibility = 1.8

def globalVersion = new Version("1.0.0-RELEASE")
version = globalVersion
status = version.status

group='com.smartystreets'

task wrapper(type: Wrapper) {
    gradleVersion = '4.9'
}

ext {
    publish = true
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        //mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Finchley.RELEASE'
        mavenBom 'io.spring.platform:platform-bom:Cairo-SR4'
    }
}

dependencies {
    compile 'com.fasterxml.jackson.core:jackson-databind'
    compile 'javax.validation:validation-api'
    compile 'org.hibernate:hibernate-validator'
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.springframework.boot:spring-boot-configuration-processor"
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile "org.springframework:spring-web"

//    testCompile 'org.mockito:mockito-core'
    testCompile "org.springframework.boot:spring-boot-starter-test"
}

compileJava.dependsOn(processResources)

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

test {
    jvmArgs= ['-Dspring.profiles.active=unittest']
}

configurations {
    published
}

artifacts {
    published sourceJar
}

bintray {
    user = project.hasProperty('bintrayuser') ? bintrayuser: System.getenv('bintrayuser')
    key = project.hasProperty('bintraykey') ? bintraykey: System.getenv('bintraykey')

    configurations = ['published', 'archives']
    dryRun = false //Whether to run this as dry-run, without deploying
    publish = project.publish //If version should be auto published after an upload
    pkg {
        repo = 'roomandboard-maven'
        userOrg = 'roomandboard' //An optional organization name when the repo belongs to one of the user's orgs
        name = 'smartystreets-spring'
        websiteUrl = 'https://github.com/rnbWarden/smartystreets-spring'
        issueTrackerUrl = 'https://github.com/rnbWarden/smartystreets-spring/issues'
        vcsUrl = 'https://github.com/rnbWarden/smartystreets-spring.git'
        licenses = ['MIT']
        labels = ['addressvalidation', 'java', 'spring']
        publicDownloadNumbers = true
        version {
            name =  globalVersion
            released  = new Date()
            gpg {
                sign = false //Determines whether to GPG sign the files. The default is false
            }
            mavenCentralSync {
                sync = false //Optional (true by default). Determines whether to sync the version to Maven Central.
            }
        }
    }
}
class Version {
    String originalVersion
    String thisVersion
    String status
    Date buildTime

    Version(String versionValue) {
        buildTime = new Date()
        originalVersion = versionValue
        if (originalVersion.endsWith('-SNAPSHOT')) {
            status = 'integration'
            thisVersion = originalVersion.substring(0, originalVersion.length() - 'SNAPSHOT'.length()) + getTimestamp()
        } else {
            status = 'release'
            thisVersion = versionValue
        }
    }

    String getTimestamp() {
        // Convert local file timestamp to UTC
        def format = new SimpleDateFormat('yyyyMMddHHmmss')
        format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')));
        return format.format(buildTime)
    }

    String toString() {
        thisVersion
    }
}
