plugins {
    id "com.jfrog.bintray" version "1.1"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'

import java.text.SimpleDateFormat

sourceCompatibility = 1.8
def globalVersion = new Version(hasProperty('currentVersion')?currentVersion:"0.1.0-SNAPSHOT")
version = globalVersion
status = version.status

group='com.smartystreets'

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

ext {
    publish = true
    springVersion = '4.1.6.RELEASE'
    jacksonVersion = '2.5.1'
}

repositories {
    mavenCentral()
}

dependencies {

    compile "org.springframework:spring-web:$springVersion"

    compile 'javax.validation:validation-api:1.0.0.GA'
    compile 'org.hibernate:hibernate-validator:4.2.0.Final'

    compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"

    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

configurations {
    published
}

artifacts {
    published sourceJar
}

bintray {
    user = hasProperty('bintrayuser') ? bintrayuser: null
    key = hasProperty('bintraykey') ? bintraykey: null

    configurations = ['published', 'archives']
    dryRun = false //Whether to run this as dry-run, without deploying
    publish = project.publish //If version should be auto published after an upload
    pkg {
        repo = 'roomandboard-maven'
        userOrg = 'roomandboard' //An optional organization name when the repo belongs to one of the user's orgs
        name = 'smartystreets-spring'
        websiteUrl = 'https://github.com/jarheadjred/smartystreets-spring'
        issueTrackerUrl = 'https://github.com/jarheadjred/smartystreets-spring/issues'
        vcsUrl = 'https://github.com/jarheadjred/smartystreets-spring.git'
        licenses = ['MIT']
        labels = ['addressvalidation', 'java', 'spring']
        publicDownloadNumbers = true
        version {
            name =  globalVersion
            released  = new Date()
            gpg {
                sign = false //Determines whether to GPG sign the files. The default is false
            }
            mavenCentralSync {
                sync = false //Optional (true by default). Determines whether to sync the version to Maven Central.
            }
        }
    }
}
class Version {
    String originalVersion
    String thisVersion
    String status
    Date buildTime

    Version(String versionValue) {
        buildTime = new Date()
        originalVersion = versionValue
        if (originalVersion.endsWith('-SNAPSHOT')) {
            status = 'integration'
            thisVersion = originalVersion.substring(0, originalVersion.length() - 'SNAPSHOT'.length()) + getTimestamp()
        } else {
            status = 'release'
            thisVersion = versionValue
        }
    }

    String getTimestamp() {
        // Convert local file timestamp to UTC
        def format = new SimpleDateFormat('yyyyMMddHHmmss')
        format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')));
        return format.format(buildTime)
    }

    String toString() {
        thisVersion
    }
}
